name: Build, Test, and Deploy

on:
  workflow_dispatch:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  data-importer-build:
    name: Build data-importer
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - name: Set up Go
      uses: actions/setup-go@v3
      with:
        go-version: '1.20'
    - name: Build
      run: go build -v ./cmd/data-importer
    - name: Upload data-importer
      uses: actions/upload-artifact@v3
      with:
        name: data-importer
        path: ./data-importer

  realtime-build:
    name: Build realtime
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - name: Set up Go
      uses: actions/setup-go@v3
      with:
        go-version: '1.20'
    - name: Build
      run: go build -v ./cmd/realtime
    - name: Upload realtime
      uses: actions/upload-artifact@v3
      with:
        name: realtime
        path: ./realtime

  web-api-build:
    name: Build web-api
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - name: Set up Go
      uses: actions/setup-go@v3
      with:
        go-version: '1.20'
    - name: Build
      run: go build -v ./cmd/web-api
    - name: Upload webapi
      uses: actions/upload-artifact@v3
      with:
        name: web-api
        path: ./web-api

  stats-build:
    name: Build stats
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - name: Set up Go
      uses: actions/setup-go@v3
      with:
        go-version: '1.20'
    - name: Build
      run: go build -v ./cmd/stats
    - name: Upload stats
      uses: actions/upload-artifact@v3
      with:
        name: stats
        path: ./stats

  data-importer-docker:
    name: Package data-importer Docker image
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    needs:
      - data-importer-build

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Download artifact
        uses: actions/download-artifact@v3
        with:
          name: data-importer
          path: ./

      - name: Log in to the Container registry
        uses: docker/login-action@f054a8b539a109f9f41c372932f1ae047eff08c9
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@98669ae865ea3cffbcbaa878cf57c20bbf1c6c38
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/data-importer
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,format=short
            type=sha,format=long

      - name: Build and push Docker image
        uses: docker/build-push-action@ad44023a93711e3deb337508980b4b5e9bcdc5dc
        with:
          context: .
          file: Dockerfile.data-importer
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

  realtime-docker:
    name: Package realtime Docker image
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    needs:
      - realtime-build

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Download artifact
        uses: actions/download-artifact@v3
        with:
          name: realtime
          path: ./

      - name: Log in to the Container registry
        uses: docker/login-action@f054a8b539a109f9f41c372932f1ae047eff08c9
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@98669ae865ea3cffbcbaa878cf57c20bbf1c6c38
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/realtime
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,format=short
            type=sha,format=long

      - name: Build and push Docker image
        uses: docker/build-push-action@ad44023a93711e3deb337508980b4b5e9bcdc5dc
        with:
          context: .
          file: Dockerfile.realtime
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

  web-api-docker:
    name: Package web-api Docker image
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    needs:
      - web-api-build

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Download artifact
        uses: actions/download-artifact@v3
        with:
          name: web-api
          path: ./
      
      - name: Log in to the Container registry
        uses: docker/login-action@f054a8b539a109f9f41c372932f1ae047eff08c9
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@98669ae865ea3cffbcbaa878cf57c20bbf1c6c38
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/web-api
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,format=short
            type=sha,format=long

      - name: Build and push Docker image
        uses: docker/build-push-action@ad44023a93711e3deb337508980b4b5e9bcdc5dc
        with:
          context: .
          file: Dockerfile.web-api
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

  stats-docker:
    name: Package stats Docker image
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    needs:
      - stats-build

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Download artifact
        uses: actions/download-artifact@v3
        with:
          name: stats
          path: ./
      
      - name: Log in to the Container registry
        uses: docker/login-action@f054a8b539a109f9f41c372932f1ae047eff08c9
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@98669ae865ea3cffbcbaa878cf57c20bbf1c6c38
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/stats
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,format=short
            type=sha,format=long

      - name: Build and push Docker image
        uses: docker/build-push-action@ad44023a93711e3deb337508980b4b5e9bcdc5dc
        with:
          context: .
          file: Dockerfile.stats
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

  data-importer-deploy-helm:
    if: github.ref == 'refs/heads/main'
  
    name: Deploy data-importer to Kubernetes
    runs-on: ubuntu-latest
    environment: production

    needs: data-importer-docker

    permissions:
      contents: 'read'
      id-token: 'write'

    steps:
    - name: Checkout
      uses: actions/checkout@v3
    - name: Helm tool installer
      uses: Azure/setup-helm@v3

    - name: Kubectl tool installer
      uses: Azure/setup-kubectl@v3

    - name: Setup kubeconfig
      run: |
          mkdir ~/.kube/
          echo "$KUBECONFIG" >> ~/.kube/config
          chmod 600 ~/.kube/config
      shell: bash
      env:
        KUBECONFIG: ${{secrets.BRITBUS_KUBECONFIG}}

    - name: Helm upgrade
      run: |-
        helm upgrade -i travigo-data-importer ./charts/travigo-data-importer --set image.tag=sha-${{ github.sha }}

  realtime-deploy-helm:
    if: github.ref == 'refs/heads/main'
  
    name: Deploy realtime to Kubernetes
    runs-on: ubuntu-latest
    environment: production

    needs: realtime-docker

    permissions:
      contents: 'read'
      id-token: 'write'

    steps:
    - name: Checkout
      uses: actions/checkout@v3
    - name: Helm tool installer
      uses: Azure/setup-helm@v3

    - name: Kubectl tool installer
      uses: Azure/setup-kubectl@v3

    - name: Setup kubeconfig
      run: |
          mkdir ~/.kube/
          echo "$KUBECONFIG" >> ~/.kube/config
          chmod 600 ~/.kube/config
      shell: bash
      env:
        KUBECONFIG: ${{secrets.BRITBUS_KUBECONFIG}}

    - name: Helm upgrade
      run: |-
        helm upgrade -i travigo-realtime ./charts/travigo-realtime --set image.tag=sha-${{ github.sha }}

  web-api-deploy-helm:
    if: github.ref == 'refs/heads/main'
  
    name: Deploy web-api to Kubernetes
    runs-on: ubuntu-latest
    environment: 
      name: production
      url: https://api.britbus.app/core

    needs: web-api-docker

    permissions:
      contents: 'read'
      id-token: 'write'

    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: Helm tool installer
      uses: Azure/setup-helm@v3

    - name: Kubectl tool installer
      uses: Azure/setup-kubectl@v3

    - name: Setup kubeconfig
      run: |
          mkdir ~/.kube/
          echo "$KUBECONFIG" >> ~/.kube/config
          chmod 600 ~/.kube/config
      shell: bash
      env:
        KUBECONFIG: ${{secrets.BRITBUS_KUBECONFIG}}

    - name: Helm upgrade
      run: |-
        helm upgrade -i travigo-web-api ./charts/travigo-web-api --set image.tag=sha-${{ github.sha }}

  stats-deploy-helm:
    if: github.ref == 'refs/heads/main'
  
    name: Deploy stats to Kubernetes
    runs-on: ubuntu-latest
    environment: 
      name: production
      url: https://api.britbus.app/stats

    needs: stats-docker

    permissions:
      contents: 'read'
      id-token: 'write'

    steps:
    - name: Checkout
      uses: actions/checkout@v3
    - name: Helm tool installer
      uses: Azure/setup-helm@v3

    - name: Kubectl tool installer
      uses: Azure/setup-kubectl@v3

    - name: Setup kubeconfig
      run: |
          mkdir ~/.kube/
          echo "$KUBECONFIG" >> ~/.kube/config
          chmod 600 ~/.kube/config
      shell: bash
      env:
        KUBECONFIG: ${{secrets.BRITBUS_KUBECONFIG}}

    - name: Helm upgrade
      run: |-
        helm upgrade -i travigo-stats ./charts/travigo-stats --set image.tag=sha-${{ github.sha }}
